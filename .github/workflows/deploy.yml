# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "clients/*" ]

env:
  AWS_REGION: us-east-2
  PRIVATE_REPOSITORY: avcorn-image
  ECS_SERVICE: avcorn-service
  ECS_CLUSTER: avcorn-cluster
  ECS_TASK_DEFINITION: ./.aws/ecs-taskdefinition.json
  CONTAINER_NAME: avcorn-container

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Figure out Client
        id: guess-client
        env:
          PRIVATE_REPOSITORY: ${{ github.ref_name }}
        run: |
          CLIENT=${PRIVATE_REPOSITORY//clients\//}
          echo $CLIENT
          REPOSITORY="$CLIENT-image"
          echo "client=$CLIENT" >> $GITHUB_OUTPUT
          echo "repo=$REPOSITORY" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Private ECR
        id: build-private
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
          REPOSITORY: ${{ steps.guess-client.outputs.repo }}
        run: |
          echo "docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG . -f container/Dockerfile"
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG . -f container/Dockerfile
          echo "docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG"
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Replace Client ID
        id: replace-default
        env:
          CLIENT: ${{ steps.guess-client.outputs.client }}
          TASKDEF: ${{ env.ECS_TASK_DEFINITION }}
          CONTAINER: ${{ steps.build-private.outputs.image }}
        run: |
          sed -i "s/avcorn-image/${CONTAINER//\//\\\/}/g" $TASKDEF
          sed -i "s/avcorn-/${CLIENT}-/g" $TASKDEF
          echo "$(cat $TASKDEF)"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ steps.guess-client.outputs.repo }}
          image: ${{ steps.build-private.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
